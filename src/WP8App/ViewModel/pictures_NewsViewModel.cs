// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   ViewModel.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls=WPAppStudio.Controls;
using Entities=WPAppStudio.Entities;
using EntitiesBase=WPAppStudio.Entities.Base;
using IServices=WPAppStudio.Services.Interfaces;
using IViewModels=WPAppStudio.ViewModel.Interfaces;
using Localization=WPAppStudio.Localization;
using Repositories=WPAppStudio.Repositories;
using Services=WPAppStudio.Services;
using ViewModelsBase=WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of pictures_News ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class pictures_NewsViewModel : ViewModelsBase.VMBase, IViewModels.Ipictures_NewsViewModel
    {       

		private readonly IServices.IDialogService _dialogService;
		private readonly Repositories.Ipictures_picturesDataSource _pictures_picturesDataSource;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="pictures_NewsViewModel" /> class.
        /// </summary>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="pictures_picturesDataSource">The Pictures_pictures Data Source.</param>
        public pictures_NewsViewModel(IServices.IDialogService dialogService, Repositories.Ipictures_picturesDataSource pictures_picturesDataSource)
        {
			_dialogService = dialogService;
			_pictures_picturesDataSource = pictures_picturesDataSource;
        }
		
	
		private ObservableCollection<EntitiesBase.RssSearchResult> _pictures_NewsListControlCollection;

        /// <summary>
        /// Pictures_NewsListControlCollection property.
        /// </summary>		
        public ObservableCollection<EntitiesBase.RssSearchResult> Pictures_NewsListControlCollection
        {
            get
            {
				
                if(_pictures_NewsListControlCollection == null)
					Getpictures_NewsListControlCollectionData();
				return _pictures_NewsListControlCollection;     
            }
            set
            {
                SetProperty(ref _pictures_NewsListControlCollection, value);
            }
        }
	
		private EntitiesBase.RssSearchResult _selectedpictures_NewsListControlCollection;

        /// <summary>
        /// Selectedpictures_NewsListControlCollection property.
        /// </summary>		
        public EntitiesBase.RssSearchResult Selectedpictures_NewsListControlCollection
        {
            get
            {
				return _selectedpictures_NewsListControlCollection;
            }
            set
            {
                SetProperty(ref _selectedpictures_NewsListControlCollection, value);
            }
        }

        /// <summary>
        /// Delegate method for the Refreshpictures_NewsListControlCollectionCommand command.
        /// </summary>
        public async void Refreshpictures_NewsListControlCollectionCommandDelegate() 
        {
			try
			{
				LoadingPictures_NewsListControlCollection = true;
				var items = await  _pictures_picturesDataSource.Refresh();
				Pictures_NewsListControlCollection = items;
			}
            catch (Exception ex)
            {
				Pictures_NewsListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.rssError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingPictures_NewsListControlCollection = false;
			}
        }
		
		
        private bool _loadingPictures_NewsListControlCollection;
		
        public bool LoadingPictures_NewsListControlCollection
        {
            get { return _loadingPictures_NewsListControlCollection; }
            set { SetProperty(ref _loadingPictures_NewsListControlCollection, value); }
        }

        private ICommand _refreshpictures_NewsListControlCollectionCommand;

        /// <summary>
        /// Gets the Refreshpictures_NewsListControlCollectionCommand command.
        /// </summary>
        public ICommand Refreshpictures_NewsListControlCollectionCommand
        {
            get { return _refreshpictures_NewsListControlCollectionCommand = _refreshpictures_NewsListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand(Refreshpictures_NewsListControlCollectionCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the Getpictures_NewsListControlCollectionCommand command.
        /// </summary>
        public  void Getpictures_NewsListControlCollectionCommandDelegate(int pageNumber= 0) 
        {
				Getpictures_NewsListControlCollectionData(pageNumber);
        }
		

        private ICommand _getpictures_NewsListControlCollectionCommand;

        /// <summary>
        /// Gets the Getpictures_NewsListControlCollectionCommand command.
        /// </summary>
        public ICommand Getpictures_NewsListControlCollectionCommand
        {
            get { return _getpictures_NewsListControlCollectionCommand = _getpictures_NewsListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand<int>(Getpictures_NewsListControlCollectionCommandDelegate); }
        }

        private async void Getpictures_NewsListControlCollectionData(int pageNumber = 0)
        {
	
			try
			{
				LoadingPictures_NewsListControlCollection = true;
			
				var items = await _pictures_picturesDataSource.GetData();
                Pictures_NewsListControlCollection = items;
			}
            catch (Exception ex)
            {
				Pictures_NewsListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.rssError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingPictures_NewsListControlCollection = false;
			}
		}
    }
}
